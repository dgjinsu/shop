JPA란
기존의 데이터 접근 방식
- 자바 객체를 SQL을 통해 데이터베이스에 관리하게 하고 DB에 저장된 데이터를 사용하려면 SQL을 통해 다시 자바 객체로 변환하는 작업을 반복했어야 했다.
- 객체 지향적으로 프로그래밍 할 수 없다.

이를 해결하기 위해 나온 기술 ORM
ORM이란
객체와 DB 사이에서 2개를 매핑하는 역할

JPA는 위에서 설명한 ORM 기술의 표준 명세로 자바에서 제공하는 API 이다. 

JPA 장점
1. 데이터 베이스마다 쿼리문이 다르기 때문에 개발 중 DB를 변경할 때 문제가 있다. 하지만 JPA는 추상화한 데이터 접근 계층을 제공
2. 객체지향적 프로그래밍 가능 ( 직관적이고 비즈니스 로직에 집중 가능)
3. 생산성 향상 (SQL 문을 직접 작성하지 않고 객체를 사용하여 동작하기 떄문에 유지보수, 재사용성 좋다)

JPA 단점
1. 복잡한 쿼리 처리 어려움
	- Native SQL을 통해 기존의 SQL문을 사용할 수 있지만, 그러면 특정 DB에 종속된다. 이를 보완하기 위해서 JPQL을 지원
2. 성능저하의 위험성 (자동으로 생성되는 쿼리가 많기 떄문에 개발자가 의도하지 않은 쿼리로 인해 성능이 저하되기도 한다)

JPA 동작 방식
Entity Manger Factory -> Entity Manager -> Entity

영속성 컨텍스트
애플리케이션과 데이터베이스 사이에 중간 계층
- 이점 : 1차 캐시, 동일성 보장, 트랜잭션을 지원하는 쓰기 지연(SQL문을 모았다가 커밋하는 시점에 DB에 반영) , 변경 감지


Entity 매핑 관련 Annotation
@Entity : 클래스를 엔티티로 선언
@Table : 엔티티와 매핑할 테이블을 지정
@Id : 테이블의 기본키에 사용할 속성을 지정
@GeneratedValue : 키 값을 생성하는 전략 명시
@Lob : BLOB, CLOB 타입 매핑 (CLOB : 사이즈가 큰 데이터를 외부 파일로 저장하기 위한 데이터 타입, BLOB : 바이너리 데이터를 DB 외부에 저장하기 위한 타입
@CreationTimestamp : insert 시 시간 자동 저장
@UpdateTimestamp : update 시 시간 자동 저장
@Enumerated : Enum타입 패밍
@Transient : 해당 필드 데이터베이스 매핑 무시
@Temporal : 날짜 타입 매핑
@CreateDate : 엔티티가 생성되어 저장될 때 시간 자동 저장
@LastModifiedDate : 조회한 엔티티의 값을 변경할 때 시간 자동 저장
@Column : 필드와 컬럼 패밍
	-column 속성
	1. name : 필드와 매핑할 컬럼 이름 설정
	2. unique : 유니크 제약 조건 설정
	3. insertable : insert 가능 여부
	4. updatable : update 가능 여부
	5. length : String 타입의 문자 길이 제약 조건 설정
	6. nullable : null 값의 허용 여부 설정


application-test.properties
테스트 환경의 경우 h2 DB를 사용하도록 별도로 Properties 를 만들어 사용 가능
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.url=jdbc:h2:mem:test
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
Test환경에서
@TestPropertySource(location = "classpath:application-test.properties") 를 이용하여 더 높은 우선순위를 설정


쿼리 메소드
find + 엔티티 이름 + By + 변수 이름
ex)
findByItemNm, 
findByPriceLessThan, 
findByItemNmOrItemDetail, 
findByPriceLessThanOrderByPriceDesc(price보다 작고, price 를 기준으로 내림차순 정렬)

JPQL
@Query 어노테이션을 이용하여 SQL과 유사한 객체지향 쿼리 언어
ex) 상품 상세 설명을 파라미터로 받아 해당 내용을 상품 상세 설명에 포함하고 있는 데이터를 조회하며, 정렬 순서는 가격이 높은 순으로 조회
	-> @Query("select i from item i where i.itemDetail like %:itemDetail% order by i.price desc")
	    List<Item> findByItemDetail(@Param("itemDetail") String itemDetail);
select i from (엔티티 이름) (별칭(i)) where (i.프로퍼티이름) = :abc 

Querydsl
-JPQL을 코드로 작성할 수 있도록 도와주는 빌더 API 이다.
-SQL문을 문자열이 아닌 코드로 작성하기 때문에 컴파일러의 도움을 받을 수 있다.
ex)
@PersistenceContext
EntityManger em;

JPAQueryFactory queryFactory = new JPAQueryFactory(em);
JPAQuery<Item> query = queryFactory.selectFrom(qItem)
		.where(qItem.itemSellStatus.eq(ItemSellStatus.SELL))
		.where(qItem.itemDetail.like("%" + "테스트 상품 상세 설명" + "%"))
		.orderBy(qItem.price.desc());

List<Item> itemList = query.fetch();

JPAQuery 데이터 반환 메소드
List<T> fetch()		: 조회 결과 리스트 반환
T fetchOne			: 조회 대상이 1건인 경우 제네릭으로 지정한 타입 변환
T fetchFirst()			: 조회 대상 중 1건만 반환
Long fetchCount()		: 조회 대상 개수 변환
QueryResult<T> fetchResults() : 조회한 리스트와 전체 개수를 포함한 QueryResults 반환


Thymeleaf
<p th:text="${data}">Hello</p>

Model 데이터 사용
<span th:text="${itemDto.itemNm}"></span>
<span th:text="${itemDto.itemDetail}"></span>

th:each 사용
<tr th:each="itemDto, status: ${itemDtoList}">		itemDtoLIst에 있는 데이터를 하나씩 꺼내와서 itemDto에 담아줌 / status는 현재 반복에 대한 상태 데이터
	<td th:text="${status.index}"></td>
	<td th:text="${itemDto.itemNm}"></td>

th:if, th:unless
<tr th:each="itemDto", status: ${itemDtoList}">
	<td th:if="${status.even}" th:text="짝수"></td>
	<td th:unless="$status.even}" th:text="홀수"></td>

th:href
<a th:href="@{/thymeleaf/ex01}">예제1 페이지 이동</a>
<a th:href="@{/thymeleaf/ex06(param1='파마리터1', param2='파라미터2')}">thymeleaf 파라미터 전달</a>	컨트롤러에서 같은 이름의 파라미터를 쓰면 데이터가 자동으로 바인딩 된다


타임리프 페이지 레이아웃
- 공통적으로 적용되는 레이아웃을 미리 만들어놓고 현재 작성중인 페이지만 중간에 끼워넣으면 된다
ex)
<div th:replace="fragments/header::header"></div>
<div layout:fragment="content"> <div>
<div th:replace="fragments/footer::footer"></div>


<MocMvc 테스트>
MocMvc 클래스를 이용해 실제 객체와 비슷하지만 테스트에 필요한 기능만 가지는 가짜 객체이다. 이를 이용하면 웹 브라우저에서 실제로 요청하는것처럼 테스트할 수 있다.



스프링 시큐리티
인증 : 해당 리소스에 대해서 작업을 수행할 수 있는 주체인지 확인하는 것
	EX) 게시글을 보는것은 로그인 필요 x / 댓글 작성하는것은 로그인 필요 O
인가 : 인가는 인증 과정 이후
	EX) 관리자 페이지 접근 등
스프링 시큐리티를 추가하는것 만으로도 모든 요청에 인증을 요구한다.

SecurityConfig 파일에 @EnableWebSecurity 어노테이션 선언과 WebSecurityConfigurerAdapter 을 상속받아 메소드 오버라이딩을 한다




javax.validation
@NotEmpty		NULL 체크 및 문자열의 경우 길이 0인지 검사
@NotBlank		NULL 체크 및 문자열의 경우 길이 0 및 빈 분자열(" ") 검사
@Length		최소, 최대 길이 검사
@Email		이메일 형식인지 검사
@Max @Min
@Null			값이 NULL 인지 검사
@NotNull		값이 NULL 이 아닌지 검사4


@Valid, bindingResult
public String newMember(@Valid MemberFormDto memberFormDto, BindingREsult bindingResult, Model model)
검증하려는 객체의 앞에 @Valid 어노테이션을 선언하고, 파라미터로 bindingResult 객체를 추가
검사 후 결과는 bindingResult에 담아준다. 
if(bindingResult.hasErrors()) 를 통해 에러가 있는지 확인


<로그인, 로그아웃>
- UserDetailsService 인터페이스 : DB에서 회원 정보를 가져오는 역할을 담당
- loadUserByUsername() 메소드 : 회원 정보를 조회하여 사용자의 정보와 권한을 갖는 UserDetails 인터페이스를 반환, User 클래스는 UserDetails 인터페이스 구현체

@Override
protected void configure(HttpSecurity http) throws Exception {	Http 요청에 대한 보안을 설정
	http.formLogin().~~~~		: 로그인관련

	http.authorizeRequests().~~~	: 페이지 권한 관련(permitAll(), hasRole("ADMIN"), authenticated())

	http.exceptionHandling().~~~	: 인증되지 않은 상요자가 리소스에 접근했을 때 수행되는 핸들러 등록
}
@Override
protected void configure(AuthentiationManagerBuilder auth) throws Exception {		:userDetailService를 구현하고 있는 객체로 memberService를 지정해줌
	auth.userDetailsService(memberService).passwordEncoder(passwordEncoder());
}
@Bean
public PasswordEncoder passwordEncoder() {				비밀번호를 DB에 그대로 저장하면 해킹의 위험이 있다. BCryptPasswordEncoder의 해시함수를 이용하여 비밀번호를 암호화
	return new BCryptPasswordEncoder();
}

로그인이 되었을때와 안 되어있을때의 navbar 화면은 달라야한다. 이를 위해서 sec:authorize 속성을 이용
- 로그인을 했을 경우 : sec:authorize="isAuthenticated()"
- 로그인을 하지 않았을 경우 : sec:authorize="isAnonymous()"
- 특정 role 만 보이게 할 경우 : sec:authorize="hasAnyAuthority"('ROLE_ADMIN')


<연관관계 매핑>
JPA의 객체지향적 방식
@OneToOne
@OneToMany
@ManyToOne
@ManyToMany
-단방향 / 양방향

일대일 매핑일 경우 : @OneToOne 어노테이션을 이용해 회원 엔티티와 일대일로 매핑, @JoinColumn 어노테이션을 이용해 매핑할 외래키 지정
장점 : 하나의 엔티티를 조회하면서 매핑된 다른 엔티티의 정보도 동시에 가져올 수 있다.

양방향 매핑에서는 "연관 관계의 주인"을 설정해야 한다.
- 연관 관계의 주인은 외래키가 있는 곳으로 설정
- 연관 관계의 주인이 외래키를 관리(등록, 수정, 삭제)
- 주인이 아닌 쪽은 연관 관계 매핑 시 mappedBy 속성의 값으로 연관 관계의 주인을 설정
- 주인이 아닌 쪽은 읽기만 가능

다대다 매핑
- 실무에서 사용하지 않음
- 정규화된 테이블 2개로 다대다를 표현할 수 없다. 따라서 연결 테이블을 생성해서 다대다 관계를 일대다, 다대일 관계로 풀어낸다.


<영속성 전이> = cascade
영속성 전이란?
- 엔티티의 상태를 변경할 떄 해당 엔티티와 연관된 엔티티의 상태 변화를 전파시키는 옵션
- 이떄 부모는 One에 해당하고 자식은 Many에 해당한다.

CASCADE 종류
- persist : 부모 엔티티가 영속화될 떄 자식 엔티티도 영속화
- merge : 부모 엔티티가 병합될 때 자식 엔티티도 병합
- remove : 부모 엔티티가 삭제될 떄 연관된 자식 엔티티도 삭제
- refresh : 부모 엔티티가 refresh 되면 연관된 자식 엔티티도 refresh
- detach : 부모 엔티티가 detach 되면 연관된 자식 엔티티도 detach 상태로 변경
- ALL : 부모 엔티티의 영속성 상태 변화를 자식 엔티티에 모두 전이


<고아객체 제거>
고아 객체 : 부모 엔티티와 연관 관계가 끊어진 자식 엔티티
- @OneToMany 어노테이션에 orphanRemoval = true 옵션을 추가

<지연 로딩>
즉시 로딩은 orderItem 데이터를 조회했을 때 orderItem 이외에 item, order, member 테이블을 조인해서 한꺼번에 가져온다.
사용하지 않는 데이터도 한꺼번에 조회하므로 성능 문제 -> 실무에서 사용 X -> 지연로딩 방식 채택 (FetchType.LAZY)
@ManyToOne(fetch = fetchType.LAZY) 옵션 추가

이렇게 했을 때 OrderItem에서 Order 을 조회 하면 Order 실제 엔티티 대신에 "프록시 객체"를 넣어준다
프록시 객체는 실제로 사용되기 전까지 데이터 로딩을 하지 않고, 실제 사용 시점에 쿼리문이 실행된다.


<Auditing>
JPA에서는 Auditing 기능을 제공하여 엔티티가 저장 또는 수정될 때 자동으로 등록일, 수정일, 등록자, 수정자를 입력해준다. 
- AuditorAware 인터페이스를 구현한 클래스 생성
- 기능을 사용하기 위해 Config 파일 생성 (Bean으로 등록)


<modelmapper>
- 서로 다른 클래스의 값을 필드의 이름과 자료형이 같으면 getter, setter 를 통해 값을 복사해서 객체로 반환해준다.
ex) public static ItemImgDto of(ItemImg itemImg) {
	return modelMapper.map(itemImg, ItemImgDto.class);
    }



