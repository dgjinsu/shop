JPA란
기존의 데이터 접근 방식
- 자바 객체를 SQL을 통해 데이터베이스에 관리하게 하고 DB에 저장된 데이터를 사용하려면 SQL을 통해 다시 자바 객체로 변환하는 작업을 반복했어야 했다.
- 객체 지향적으로 프로그래밍 할 수 없다.

이를 해결하기 위해 나온 기술 ORM
ORM이란
객체와 DB 사이에서 2개를 매핑하는 역할

JPA는 위에서 설명한 ORM 기술의 표준 명세로 자바에서 제공하는 API 이다. 

JPA 장점
1. 데이터 베이스마다 쿼리문이 다르기 때문에 개발 중 DB를 변경할 때 문제가 있다. 하지만 JPA는 추상화한 데이터 접근 계층을 제공
2. 객체지향적 프로그래밍 가능 ( 직관적이고 비즈니스 로직에 집중 가능)
3. 생산성 향상 (SQL 문을 직접 작성하지 않고 객체를 사용하여 동작하기 떄문에 유지보수, 재사용성 좋다)

JPA 단점
1. 복잡한 쿼리 처리 어려움
	- Native SQL을 통해 기존의 SQL문을 사용할 수 있지만, 그러면 특정 DB에 종속된다. 이를 보완하기 위해서 JPQL을 지원
2. 성능저하의 위험성 (자동으로 생성되는 쿼리가 많기 떄문에 개발자가 의도하지 않은 쿼리로 인해 성능이 저하되기도 한다)

JPA 동작 방식
Entity Manger Factory -> Entity Manager -> Entity

영속성 컨텍스트
애플리케이션과 데이터베이스 사이에 중간 계층
- 이점 : 1차 캐시, 동일성 보장, 트랜잭션을 지원하는 쓰기 지연(SQL문을 모았다가 커밋하는 시점에 DB에 반영) , 변경 감지


Entity 매핑 관련 Annotation
@Entity : 클래스를 엔티티로 선언
@Table : 엔티티와 매핑할 테이블을 지정
@Id : 테이블의 기본키에 사용할 속성을 지정
@GeneratedValue : 키 값을 생성하는 전략 명시
@Lob : BLOB, CLOB 타입 매핑 (CLOB : 사이즈가 큰 데이터를 외부 파일로 저장하기 위한 데이터 타입, BLOB : 바이너리 데이터를 DB 외부에 저장하기 위한 타입
@CreationTimestamp : insert 시 시간 자동 저장
@UpdateTimestamp : update 시 시간 자동 저장
@Enumerated : Enum타입 패밍
@Transient : 해당 필드 데이터베이스 매핑 무시
@Temporal : 날짜 타입 매핑
@CreateDate : 엔티티가 생성되어 저장될 때 시간 자동 저장
@LastModifiedDate : 조회한 엔티티의 값을 변경할 때 시간 자동 저장
@Column : 필드와 컬럼 패밍
	-column 속성
	1. name : 필드와 매핑할 컬럼 이름 설정
	2. unique : 유니크 제약 조건 설정
	3. insertable : insert 가능 여부
	4. updatable : update 가능 여부
	5. length : String 타입의 문자 길이 제약 조건 설정
	6. nullable : null 값의 허용 여부 설정


application-test.properties
테스트 환경의 경우 h2 DB를 사용하도록 별도로 Properties 를 만들어 사용 가능
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.url=jdbc:h2:mem:test
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
Test환경에서
@TestPropertySource(location = "classpath:application-test.properties") 를 이용하여 더 높은 우선순위를 설정

